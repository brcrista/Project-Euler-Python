"""
The sequence of triangle numbers is generated by adding the natural numbers.
So, the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from itertools import accumulate, count
from typing import Iterator

from mathtools.number_theory import factors

def triangle_numbers() -> Iterator[int]:
    """The infinite sequence of triangle numbers, starting with 0 as the 0th triangle number."""
    return accumulate(count(0))

def first_triangle_number_with_more_divisors_than(n: int) -> int:
    """The first triangle number with more than `n` divisors."""
    return next(filter(lambda x: len(factors(x)) > n, triangle_numbers()))

def solution():
    return first_triangle_number_with_more_divisors_than(500)
